"""
Template for maps

WARNING: DO NOT edit .pxi FILE directly, .pxi is generated from .pxi.in
"""


include "map_init.pxi"

{{py:

# map_name, name, pair_prefix, int_suffix, float_suffix
map_types       = [('Int64toInt64', 'int64', 'int64toint64', 'int64', 'float64'),
                   ('Float64toInt64', 'float64', 'float64toint64', 'int64', 'float64'),
                   ('Int32toInt32', 'int32', 'int32toint32', 'int32', 'float32'),
                   ('Float32toInt32', 'float32', 'float32toint32', 'int32', 'float32'),
                  ]
}}


{{for map_name, name, pair_prefix, int_suffix, float_suffix in map_types}}


ctypedef {{name}}_t key_{{name}}_t

cdef extern from *:

    ctypedef struct kh_{{pair_prefix}}map_t:
        khint_t n_buckets, size, n_occupied, upper_bound
        uint32_t *flags
        key_{{name}}_t *keys
        {{int_suffix}}_t *vals  

    kh_{{pair_prefix}}map_t* kh_init_{{pair_prefix}}map() nogil
    void kh_destroy_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*) nogil
    void kh_clear_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*) nogil
    khint_t kh_get_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*, key_{{name}}_t) nogil
    void kh_resize_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*, khint_t) nogil
    khint_t kh_put_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*, key_{{name}}_t, int* result) nogil
    void kh_del_{{pair_prefix}}map(kh_{{pair_prefix}}map_t*, khint_t) nogil

    #specializing "kh_exist"-macro 
    bint kh_exist_{{pair_prefix}}map "kh_exist" (kh_{{pair_prefix}}map_t*, khint_t) nogil

cdef class {{map_name}}Map:
    cdef kh_{{pair_prefix}}map_t *table
    cdef bint for_int

    cdef bint contains(self, key_{{name}}_t key) except *
    cdef {{map_name}}MapIterator get_iter(self, int view_type)
    cdef khint_t size(self) 
    cpdef void put_{{int_suffix}}(self, key_{{name}}_t key, {{int_suffix}}_t value) except *
    cpdef {{int_suffix}}_t get_{{int_suffix}}(self, key_{{name}}_t key) except *
    cpdef void put_{{float_suffix}}(self, key_{{name}}_t key, {{float_suffix}}_t value) except *
    cpdef {{float_suffix}}_t get_{{float_suffix}}(self, key_{{name}}_t key) except *
    cpdef void discard(self, key_{{name}}_t key) except *
    

cdef struct {{pair_prefix}}_key_val_pair:
    key_{{name}}_t key
    {{int_suffix}}_t val


cdef class {{map_name}}MapIterator:
    cdef khint_t   it
    cdef int       view_type
    cdef {{map_name}}Map  parent

    cdef bint has_next(self) except *
    cdef {{pair_prefix}}_key_val_pair next(self) except *
    cdef void __move(self) except *


cdef class {{map_name}}MapView:
    cdef {{map_name}}Map  parent
    cdef int       view_type

    cdef {{map_name}}MapIterator get_iter(self)


cpdef {{map_name}}Map {{map_name}}Map_from_{{int_suffix}}_buffer(key_{{name}}_t[:] keys, {{int_suffix}}_t[:] vals, double size_hint=*)
cpdef {{map_name}}Map {{map_name}}Map_from_{{float_suffix}}_buffer(key_{{name}}_t[:] keys, {{float_suffix}}_t[:] vals,double size_hint=*)

cpdef size_t {{map_name}}Map_to_{{int_suffix}}({{map_name}}Map map, key_{{name}}_t[:] keys, {{int_suffix}}_t[:] vals, bint stop_at_unknown=*, {{int_suffix}}_t default_value=*) except *
cpdef size_t {{map_name}}Map_to_{{float_suffix}}({{map_name}}Map map, key_{{name}}_t[:] keys, {{float_suffix}}_t[:] vals, bint stop_at_unknown=*, {{float_suffix}}_t default_value=*) except *



# other help functions:
cpdef void swap_{{name}}map({{map_name}}Map a, {{map_name}}Map b) except *
cpdef {{map_name}}Map copy_{{name}}map({{map_name}}Map s)
cpdef bint are_equal_{{name}}map({{map_name}}Map a, {{map_name}}Map b) except *
cpdef void update_{{name}}map({{map_name}}Map a, {{map_name}}Map b) except *

{{endfor}}


##TODO: unify with others


cdef extern from *:

    ctypedef struct kh_pyobjectmap_t:
        khint_t n_buckets, size, n_occupied, upper_bound
        uint32_t *flags
        pyobject_t *keys
        pyobject_t *vals  

    kh_pyobjectmap_t* kh_init_pyobjectmap() nogil
    void kh_destroy_pyobjectmap(kh_pyobjectmap_t*) nogil
    void kh_clear_pyobjectmap(kh_pyobjectmap_t*) nogil
    khint_t kh_get_pyobjectmap(kh_pyobjectmap_t*, pyobject_t) nogil
    void kh_resize_pyobjectmap(kh_pyobjectmap_t*, khint_t) nogil
    khint_t kh_put_pyobjectmap(kh_pyobjectmap_t*, pyobject_t, int* result) nogil
    void kh_del_pyobjectmap(kh_pyobjectmap_t*, khint_t) nogil

    #specializing "kh_exist"-macro 
    bint kh_exist_pyobjectmap "kh_exist" (kh_pyobjectmap_t*, khint_t) nogil


cdef class PyObjectMap:
    cdef kh_pyobjectmap_t *table

    cdef bint contains(self, pyobject_t key) except *
    cdef PyObjectMapIterator get_iter(self, int view_type)
    cdef khint_t size(self) 
    cpdef void put_object(self, object key, object value) except *
    cpdef object get_object(self, object key)
    cpdef void discard(self, object key) except *
    

cdef struct pyobject_key_val_pair:
    pyobject_t key
    pyobject_t val


cdef class PyObjectMapIterator:
    cdef khint_t   it
    cdef int       view_type
    cdef PyObjectMap  parent

    cdef bint has_next(self) except *
    cdef pyobject_key_val_pair next(self) except *
    cdef void __move(self) except *

cdef class PyObjectMapView:
    cdef PyObjectMap  parent
    cdef int       view_type

    cdef PyObjectMapIterator get_iter(self)

cpdef PyObjectMap PyObjectMap_from_object_buffer(object[:] keys, object[:] vals, double size_hint=*)

cpdef size_t PyObjectMap_to_object(PyObjectMap map, object[:] keys, object[:] vals, bint stop_at_unknown=*, object default_value=*) except *

# other help functions:
cpdef void swap_pyobjectmap(PyObjectMap a, PyObjectMap b) except *
cpdef PyObjectMap copy_pyobjectmap(PyObjectMap s)
cpdef bint are_equal_pyobjectmap(PyObjectMap a, PyObjectMap b) except *
cpdef void update_pyobjectmap(PyObjectMap a, PyObjectMap b) except *





